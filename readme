This kernel module was created to help you learn the basic functionalities of a Linux module.
It demonstrates how to create a module from scratch and how to use the virtual file system, known as proc, to interact with user-space applications.
Some VSCode configurations are provided below â€” feel free to modify the paths as needed.
```
{
    "configurations": [
        {
            "name": "Linux",
            "includePath": [
    "${workspaceFolder}/**",
    "/lib/modules/5.15.0-133-generic/build/include",
        "/lib/modules/5.15.0-133-generic/build/include/uapi",
        "/lib/modules/5.15.0-133-generic/build/include/generated",
        "/lib/modules/5.15.0-133-generic/build/include/generated/uapi",
        "/lib/modules/5.15.0-133-generic/build/arch/x86/include",
        "/lib/modules/5.15.0-133-generic/build/arch/x86/include/generated",
        "/lib/modules/5.15.0-133-generic/build/arch/x86/include/uapi",
        "/lib/modules/5.15.0-133-generic/build/arch/x86/include/generated/uapi"
]
,
            "defines": [
                "__KERNEL__",
                "MODULE"
            ],
            "compilerPath": "/usr/bin/gcc",
            "cStandard": "c17",
            "cppStandard": "gnu++17",
            "intelliSenseMode": "linux-gcc-x64",
            "configurationProvider": "ms-vscode.makefile-tools"
        }
    ],
    "version": 4
}
```

At the beginning, you need to install some essential packages so that the program runs correctly.
```bash
sudo apt update
sudo apt install build-essential linux-headers-$(uname -r)
```
```bash
lsmod | grep module_name  #Search for your module, which will appear in the list if it is installed correctly.
```
```bash
sudo insmod main.ko         # install the module
sudo dmesg | tail -n 10     # Show the kernel log (you should see "Hello, kernel!")
sudo rmmod main             # uninstall the module
modinfo main.ko             # View information about your kernel
```
reference:https://www.youtube.com/watch?v=iSiyDHobXHA&t=7052s
